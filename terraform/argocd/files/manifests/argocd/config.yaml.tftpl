---
configs:
  # General Argo CD configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
  cm:
    url: ${url}

    kustomize.buildOptions: --enable-helm
    resource.customizations.health.cert-manager.io_ClusterIssuer: |
      hs = {}
      hs.status = "Progressing"
      hs.message = ""
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" and condition.status == "False" then
              hs.status = "Degraded"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
          end
        end
      end

      hs.status = "Progressing"
      hs.message = "Waiting for SecretStore"
      return hs

    resource.customizations.ignoreDifferences.Service: |
      jqPathExpressions:
      - '.spec.clusterIP'
    resource.customizations.ignoreDifferences.apiextensions.k8s.io_CustomResourceDefinition: |
      jqPathExpressions:
      - '.spec.conversion.webhook.clientConfig.caBundle'

  %{~ if enable_oidc ~}
    # Disable the admin login
    admin.enabled: 'false'
    # Dex configuration
    dex.config: |
      logger:
        level: debug
      connectors:
      - name: authentik
        type: oidc
        id: authentik
        config:
          issuer: ${oidc["issuer"]}
          clientID: ${oidc["client_id"]}
          clientSecret: $dex.authentik.clientSecret
          insecureEnableGroups: true
          scopes:
            - openid
            - profile
            - email
            - groups
  secret:
    extra:
      dex.authentik.clientSecret: ${oidc["client_secret"]}

  rbac:
    policy.csv: |
      g, argocd-admins, role:admin
  %{~ endif ~}
